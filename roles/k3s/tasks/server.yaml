---
- name: Get k3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true

- name: Set k3s installed version
  when: k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_k3s_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Download artifact only if needed
  when: k3s_version_output.rc != 0 or installed_k3s_version is version(k3s_version, '<')
  block:
    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: "0755"

    - name: Download K3s binary
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      changed_when: true

- name: Setup optional config file
  when: server_config_yaml is defined
  block:
    - name: Make config directory
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: "0755"
        state: directory

    - name: Copy config values
      ansible.builtin.copy:
        content: "{{ server_config_yaml }}"
        dest: "/etc/rancher/k3s/config.yaml"
        mode: "0644"

- name: Init first server node
  when: inventory_hostname == master
  block:
    - name: Copy K3s service file [HA]
      ansible.builtin.template:
        src: "k3s-cluster-init.service.j2"
        dest: "{{ systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"

    - name: Add service environment variables
      when: extra_service_envs is defined
      ansible.builtin.lineinfile:
        path: "{{ systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items: "{{ extra_service_envs }}"

    - name: Enable and check K3s service
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Pause to allow first server startup
      ansible.builtin.pause:
        seconds: 10

    - name: Apply K3S kubeconfig to control node
      block:
        - name: Copy kubeconfig to control node
          ansible.builtin.fetch:
            src: /etc/rancher/k3s/k3s.yaml
            dest: "{{ kubeconfig }}.{{ master }}"
            flat: true

        - name: Change server address in kubeconfig on control node
          ansible.builtin.shell: |
            KUBECONFIG={{ kubeconfig }}.{{ master }} kubectl config set-cluster default --server=https://{{ api_endpoint }}:{{ api_port }}
            sed -i '' 's/default/{{ hostvars[inventory_hostname].vars.cluster_name }}/g' {{ kubeconfig }}.{{ master }}
          delegate_to: localhost
          become: false
          register: csa_result
          changed_when:
            - csa_result.rc == 0

        - name: Update context in existing kubectl config on localhost
          ansible.builtin.shell: |
            cp {{ kubeconfig }} {{ kubeconfig }}.origin
            export KUBECONFIG={{ kubeconfig }}:{{ kubeconfig }}.{{ master }}
            kubectl config view --flatten > {{ kubeconfig }}.updated
            mv {{ kubeconfig }}.updated {{ kubeconfig }}
            rm {{ kubeconfig }}.{{ master }}
          delegate_to: localhost
          become: false
          register: updc_result
          changed_when:
            - updc_result.rc == 0

- name: Start other server if any and verify status
  when:
    - inventory_hostname != master
  block:
    - name: Copy K3s service file [HA]
      ansible.builtin.template:
        src: "k3s-ha.service.j2"
        dest: "{{ systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"

    - name: Enable and check K3s service
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Verify that all server nodes joined
      ansible.builtin.command:
        cmd: >
          k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['k3s_server'] | length)
      retries: 20
      delay: 10
      changed_when: false

- name: Setup kubectl for user
  when: user_kubectl
  block:
    - name: Create kubectl symlink
      when: lookup('fileglob', '/usr/local/bin/kubectl', errors='warn') | length == 0
      ansible.builtin.file:
        src: /usr/local/bin/k3s
        dest: /usr/local/bin/kubectl
        state: link

    - name: Create directory .kube
      ansible.builtin.file:
        path: ~{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        mode: "0750"

    - name: Copy config file to user home directory
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ~{{ ansible_user }}/.kube/config
        remote_src: true
        owner: "{{ ansible_user }}"
        mode: "0600"
